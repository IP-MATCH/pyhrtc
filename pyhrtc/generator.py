"""Different ways of generating a random instance of HRTC."""


from random import randrange, shuffle

from pyhrtc.basics import Agent, Couple, Hospital
from pyhrtc.instance import Instance


def gen_capacities(total, hospitals, even_posts):
    """Generate capacities for a number of hospitals
    :param int hospitals: The number of hospitals
    :param int total: The number of posts to generate
    :param bool even_posts: are the posts distributed evenly (True) or randomly (False)

    :return: the capacities of hospitals as a list
    :rtype: List
    """
    if even_posts:
        share = int(total / hospitals)
        excess = total - share*hospitals
        capacities = [share] * hospitals
        for e in range(excess):
            capacities[e] += 1
    else:
        capacities = [0] * hospitals
        for p in range(total):
            capacities[randrange(hospitals+1)] += 1
    return capacities


def random_hrtc(number_of_hospitals, number_of_single_residents,
                number_of_couples, resident_pref_length=None,
                hospital_pref_length=None, capacity=None, even_posts=False,
                resident_tie_density=0, hospital_tie_density=0, 
                master_list=False):
    """Generates a random instance of HRTC, with the given properties.
    Note that couples are generated by interleaving two single residents.

    :param int hospitals: the number of hospitals
    :param int single_residents: the number of single residents
    :param int couple: the number of couples
    :param int resident_pref_length: how many preferences does each resident have
    :param int hospital_pref_length: how many preferences does each hospital have
    :param float resident_tie_density: the tie density of the residents
    :param float hospital_tie_density: the tie density of the hospitals
    :param bool master_list: are hospital preferences decided by a master list?
    :param int capacity: how many posts in total are there
    :param bool even_posts: are the posts distributed evenly (True) or randomly (False)

    """
    if resident_pref_length and hospital_pref_length:
        # I don't have a good way of doing this.
        raise NotImplementedError
    if not capacity:
        capacity = number_of_single_residents + 2 * number_of_couples
    capacities = gen_capacities(capacity, number_of_hospitals, even_posts)
    # Generate all the hospitals and agents
    hospitals = {}
    single_residents = {}
    couple_doctors = {}
    for ident in range(number_of_hospitals):
        hospital = Hospital(ident, capacities[ident])
        hospitals[hospital.ident] = hospital
    for ident in range(number_of_single_residents):
        single_residents[ident] = Agent(ident)
    for ident in range(number_of_couples):
        couple_doctors[2*ident] = Agent(number_of_single_residents + 2 * ident)
        couple_doctors[2*ident+1] = Agent(number_of_single_residents + 2 * ident + 1)
    couples = {}
    if resident_pref_length:
        for doctor in single_residents.values():
            doctor.make_random_preferences(hospitals.keys(),
                                           length=resident_pref_length,
                                           tie_density=resident_tie_density)
        for doctor in couple_doctors.values():
            doctor.make_random_preferences(hospitals.keys(),
                                           length=resident_pref_length,
                                           tie_density=resident_tie_density)
        for hospital in hospitals.values():
            options = []
            for doctor in single_residents.values():
                if doctor.is_acceptable(hospital.ident):
                    options.append(doctor.ident)
            for doctor in couple_doctors.values():
                if doctor.is_acceptable(hospital.ident):
                    options.append(doctor.ident)
            if master_list:
                master_list = []
                master_list.extend(single_residents.keys())
                master_list.extend(couple_doctors.keys())
                shuffle(master_list)
                hospital.make_master_list_preferences(options, master_list)
            else:
                hospital.make_random_preferences(options, tie_density=hospital_tie_density)

        for ident in range(number_of_couples):
            couple = Couple.from_two_doctors(couple_doctors[2*ident],
                                             couple_doctors[2*ident+1])
            couples[couple.ident] = couple
        instance = Instance(single_residents=single_residents, couples=couples, hospitals=hospitals)
        return instance
